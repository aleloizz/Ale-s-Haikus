# Script di deployment per Heroku con migrazione database (PowerShell)
# Esegue deployment sicuro con allineamento schema database

Write-Host "`nüöÄ HEROKU DEPLOYMENT CON DATABASE MIGRATION" -ForegroundColor Green
Write-Host "======================================================" -ForegroundColor Green

# Spiegazione della migrazione
Write-Host "`nüìã TIPO DI MIGRAZIONE:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Schema-Sync Migration (senza perdita dati)" -ForegroundColor White
Write-Host "   ‚Ä¢ Rinomina colonna 'text' ‚Üí 'content' se necessario" -ForegroundColor White  
Write-Host "   ‚Ä¢ Aggiunge colonne mancanti per nuove feature" -ForegroundColor White
Write-Host "   ‚Ä¢ Preserva tutti i dati esistenti" -ForegroundColor White

Write-Host "`nüîç PROBLEMI RISOLTI:" -ForegroundColor Yellow
Write-Host "   ‚ùå Database: column poems.content does not exist" -ForegroundColor Red
Write-Host "   ‚ùå Routing: url_for('home') ‚Üí BuildError" -ForegroundColor Red
Write-Host "   ‚ùå Template: 500.html not found" -ForegroundColor Red
Write-Host "   ‚úÖ Implementato sistema tolleranza opzionale" -ForegroundColor Green

# Conferma utente
Write-Host "`n‚ö†Ô∏è  ATTENZIONE: Questo deployment include:" -ForegroundColor Magenta
Write-Host "   ‚Ä¢ Modifica schema database di produzione" -ForegroundColor White
Write-Host "   ‚Ä¢ Fix routing per bacheca e wiki" -ForegroundColor White
Write-Host "   ‚Ä¢ Nuovo sistema di tolleranza sillabe" -ForegroundColor White

$confirm = Read-Host "`nContinuare con il deployment? (s/N)"
if ($confirm -ne 's' -and $confirm -ne 'S') {
    Write-Host "‚ùå Deployment annullato dall'utente" -ForegroundColor Red
    exit 1
}

# 1. Controllo git status
Write-Host "`nüì§ FASE 1: Preparazione codice..." -ForegroundColor Yellow
$gitStatus = git status --porcelain
if ($gitStatus) {
    Write-Host "   üìÅ File modificati rilevati, preparazione commit..." -ForegroundColor White
    git add .
    git commit -m "Fix: Correzione problemi database e routing per Heroku

üîß DATABASE MIGRATION:
- Script migrazione schema per allineare database produzione
- Fix colonna 'content' mancante in tabella poems
- Aggiunta colonne per nuove feature (verse_count, is_valid, etc.)

üåê ROUTING FIXES:
- Fix url_for('home') ‚Üí url_for('web.index') in tutti i template  
- Template bacheca.html e wiki.html aggiornati
- Aggiunto template 500.html per gestione errori server

üéØ FEATURE ENHANCEMENT:
- Sistema tolleranza sillabe opzionale implementato
- Checkbox frontend per controllo precisione vs flessibilit√†
- Parametro use_tolerance propagato a tutte le funzioni analisi

‚úÖ MIGLIORAMENTI:
- Gestione errori bacheca migliorata
- Template 500.html con haiku personalizzato
- Script deployment automatizzato con migrazione"

    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Errore durante il commit" -ForegroundColor Red
        exit 1
    }
    Write-Host "   ‚úÖ Commit preparato con successo" -ForegroundColor Green
} else {
    Write-Host "   ‚úÖ Repository gi√† aggiornato" -ForegroundColor Green
}

# 2. Deploy del codice
Write-Host "`nüöÄ FASE 2: Push codice su Heroku..." -ForegroundColor Yellow
git push heroku main
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Errore durante il push su Heroku" -ForegroundColor Red
    exit 1
}
Write-Host "   ‚úÖ Codice deployato con successo" -ForegroundColor Green

# 3. Migrazione database
Write-Host "`nüîß FASE 3: Esecuzione migrazione database..." -ForegroundColor Yellow
Write-Host "   üóÑÔ∏è  Controllo e allineamento schema database..." -ForegroundColor White
heroku run python migrate_database.py
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Errore durante la migrazione database" -ForegroundColor Red
    Write-Host "   üîÑ Tentativo con script di verifica..." -ForegroundColor Yellow
    heroku run python check_database_schema.py
    
    $retryMigration = Read-Host "`nTentare migrazione di emergenza (elimina tutti i dati)? (s/N)"
    if ($retryMigration -eq 's' -or $retryMigration -eq 'S') {
        Write-Host "   ‚ö†Ô∏è  Esecuzione migrazione di emergenza..." -ForegroundColor Red
        heroku run 'echo "CONFERMA" | python emergency_recreate_db.py'
        if ($LASTEXITCODE -eq 0) {
            Write-Host "   ‚úÖ Migrazione di emergenza completata" -ForegroundColor Green
        } else {
            Write-Host "   ‚ùå Anche la migrazione di emergenza √® fallita" -ForegroundColor Red
            Write-Host "   üìã Comandi manuali da provare:" -ForegroundColor Yellow
            Write-Host "      heroku pg:reset --confirm nome-app" -ForegroundColor White
            Write-Host "      heroku run python migrate_database.py" -ForegroundColor White
        }
    }
} else {
    Write-Host "   ‚úÖ Migrazione database completata" -ForegroundColor Green
}

# 4. Restart dell'app
Write-Host "`nüîÑ FASE 4: Restart applicazione..." -ForegroundColor Yellow
heroku ps:restart
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ö†Ô∏è  Warning: Problema durante restart (app potrebbe essere gi√† attiva)" -ForegroundColor Yellow
} else {
    Write-Host "   ‚úÖ Applicazione riavviata" -ForegroundColor Green
}

# 5. Verifica deployment
Write-Host "`n‚úÖ DEPLOYMENT COMPLETATO!" -ForegroundColor Green
Write-Host "======================================================" -ForegroundColor Green
Write-Host "üåê App disponibile: https://www.aleshaikus.me" -ForegroundColor Cyan
Write-Host "üìä Bacheca: https://www.aleshaikus.me/bacheca" -ForegroundColor Cyan  
Write-Host "üìö Wiki: https://www.aleshaikus.me/wiki" -ForegroundColor Cyan

Write-Host "`nüîç CONTROLLI POST-DEPLOYMENT:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Verifica che la bacheca si carichi senza errori" -ForegroundColor White
Write-Host "   ‚Ä¢ Testa il sistema di tolleranza opzionale" -ForegroundColor White
Write-Host "   ‚Ä¢ Controlla che le pubblicazioni funzionino" -ForegroundColor White

Write-Host "`nüìã COMANDI UTILI:" -ForegroundColor Yellow
Write-Host "   heroku logs --tail                    # Monitora log in tempo reale" -ForegroundColor White
Write-Host "   heroku run python check_database_schema.py  # Verifica schema DB" -ForegroundColor White
Write-Host "   heroku pg:psql                       # Accesso diretto database" -ForegroundColor White
